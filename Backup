#!/bin/bash

# ==========================
# Backup + Restore Bot + AutoCron
# ==========================

# Warna
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Variabel
DATE=$(date +"%Y-%m-%d")
MYIP=$(curl -s ipv4.icanhazip.com)
SCRIPT_PATH=$(realpath "$0")
SCRIPT_NAME=$(basename "$SCRIPT_PATH")
BACKUP_DIR="/root/backup"
LOG_FILE="/var/log/backup-bot.log"

# Fungsi log
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
    echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') $1" >> $LOG_FILE
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') $1" >> $LOG_FILE
}

# Setup Bot
setup_bot() {
    echo "Pergi ke @BotFather untuk buat BOT."
    echo "Pergi ke @MissRose_bot buat cek ID kamu."
    echo ""
    read -p "Masukkan Bot Token: " bottoken
    read -p "Masukkan Admin ID : " adminid
    echo "$bottoken" > /root/.bckupbot
    echo "$adminid" >> /root/.bckupbot
    log_info "Setup Bot selesai."
}

# Backup data
bot_backup() {
    # Load bot token dan admin id
    bottoken=$(sed -n '1p' /root/.bckupbot)
    adminid=$(sed -n '2p' /root/.bckupbot)

    mkdir -p "$BACKUP_DIR"

    echo ""
    echo "Membuat password backup..."
    InputPass="1"

    # Copy data penting
    cp /etc/passwd $BACKUP_DIR/ 2>/dev/null
    cp /etc/group $BACKUP_DIR/ 2>/dev/null
    cp /etc/shadow $BACKUP_DIR/ 2>/dev/null
    cp /etc/gshadow $BACKUP_DIR/ 2>/dev/null
    cp -r /etc/xray $BACKUP_DIR/xray 2>/dev/null
    cp -r /var/www/html $BACKUP_DIR/html 2>/dev/null
    cp -r /var/lib/kyt $BACKUP_DIR/kyt 2>/dev/null

    cd /root
    ZIP_FILE="backup-$MYIP-$DATE.zip"
    zip -rP "$InputPass" "$ZIP_FILE" backup >/dev/null 2>&1

    log_info "Backup dibuat: $ZIP_FILE"

    # Kirim file ke Telegram
    log_info "Mengirim backup ke Telegram..."

    response=$(curl -s -F "chat_id=${adminid}" -F "document=@${ZIP_FILE}" "https://api.telegram.org/bot${bottoken}/sendDocument")

    # Cek response
    file_id=$(echo "$response" | grep -o '"file_id":"[^"]*"' | head -1 | cut -d'"' -f4)

    if [[ -n "$file_id" ]]; then
        log_info "Backup sukses terkirim!"
        file_info=$(curl -s "https://api.telegram.org/bot${bottoken}/getFile?file_id=${file_id}")
        file_path=$(echo "$file_info" | grep -o '"file_path":"[^"]*"' | cut -d'"' -f4)

        if [[ -n "$file_path" ]]; then
            log_info "File Path berhasil diambil!"
            # Kirim file_id + file_path ke admin
            curl -s -X POST "https://api.telegram.org/bot${bottoken}/sendMessage" \
                -d "chat_id=${adminid}" \
                -d "text=✅ Backup Sukses %0A%0A📂 File ID:%0A<code>$file_id</code>%0A📂 File Path:%0A<code>$file_path</code>%0A🔒 Password ZIP: <code>$InputPass</code>" \
                -d "parse_mode=HTML"
        else
            log_error "Gagal mengambil file_path."
        fi
    else
        log_error "Gagal mengirim file ke Telegram."
        echo "Response: $response"
    fi

    # Bersih
    rm -rf /root/backup
    rm -f "/root/$ZIP_FILE"
}

# Restore data
restoreBot() {
    bottoken=$(sed -n '1p' /root/.bckupbot | awk '{print $1}')
    read -p "File ID   : " fileId
    read -p "File PATH : " filePath
    curl -Ss --request GET \
        --url "https://api.telegram.org/file/bot${bottoken}/${filePath}?file_id=${fileId}" >backup.zip

    echo -e "[ ${green}INFO${NC} ] • Restore Data..."
	read -rp "Password File: "  InputPass
	echo -e "[ ${green}INFO${NC} ] • Getting your data..."
	unzip -P $InputPass /root/backup.zip &> /dev/null
    echo -e "[ ${green}INFO${NC} ] • Starting to restore data..."
    rm -f /root/backup.zip &> /dev/null
	sleep 1
    cd /root/backup
	echo -e "[ ${green}INFO${NC} ] • Please Wait , Restoring In Process Now... "
	sleep 1
	cp passwd /etc/ &>/dev/null
	echo -e "[ ${green}INFO${NC} ] • Restoring passwd data..."
	sleep 1
	cp group /etc/ &>/dev/null
	echo -e "[ ${green}INFO${NC} ] • Restoring group data..."
	sleep 1
	cp shadow /etc/ &>/dev/null
	echo -e "[ ${green}INFO${NC} ] • Restoring shadow data..."
	sleep 1
	cp gshadow /etc/ &>/dev/null
	echo -e "[ ${green}INFO${NC} ] • Restoring gshadow data..."
	sleep 1
    cp -r kyt /var/lib/ &>/dev/null
    cp -r xray /etc/ &>/dev/null
    cp -r html /var/www/ &>/dev/null
    rm -rf /root/backup
    rm -f backup.zip
    echo -e "[ ${green}INFO${NC} ] • Done Restore... "
    read -n 1 -s -r -p "Press any key to back on menu"
    menu
}
# Setup Auto Backup via Cron
setup_cron() {
    echo ""
    echo "Pilih Mode AutoBackup:"
    echo "1. Tiap 1 Menit"
    echo "2. Tiap 5 Jam"
    echo ""
    read -p "Pilih [1/2]: " cronChoice

    sed -i "/$SCRIPT_NAME autobackup/d" /etc/crontab

    case "$cronChoice" in
        1)
            echo "* * * * * root /bin/bash $SCRIPT_PATH autobackup" >> /etc/crontab
            ;;
        2)
            echo "0 */5 * * * root /bin/bash $SCRIPT_PATH autobackup" >> /etc/crontab
            ;;
        *)
            echo "Pilihan salah."
            ;;
    esac

    service cron restart >/dev/null 2>&1
    log_info "AutoBackup berhasil diatur."
}

# Menu utama
main_menu() {
    clear
    echo -e "${BLUE}╭═════════════════════════════════════╮${NC}"
    echo -e "${BLUE}│        Backup Bot by Alvi cell         │${NC}"
    echo -e "${BLUE}╰═════════════════════════════════════╯${NC}"
    echo ""
    echo "1. Setup Bot Telegram"
    echo "2. Backup Manual ke Telegram"
    echo "3. Restore Data dari Telegram"
    echo "4. Setup AutoBackup (Cron)"
    echo "5. Keluar"
    echo ""
    read -p "Pilih Menu [1-5]: " menu

    case $menu in
        1) clear; setup_bot ;;
        2) clear; bot_backup ;;
        3) clear; bot_restore ;;
        4) clear; setup_cron ;;
        5) exit 0 ;;
        *) main_menu ;;
    esac
}

# Start
clear
if [[ ! -f /root/.bckupbot ]]; then
    echo "Bot belum disetup."
    setup_bot
fi

# Cek Mode jalan
if [[ "$1" == "autobackup" ]]; then
    bot_backup
    exit 0
fi

main_menu
